@rendermode InteractiveWebAssembly

@page "/editcustomer/{customerid}"

@inject INorthwindService _service
@inject NavigationManager _navigation
@inject IJSRuntime jsRuntime

<h3>Edit Customer</h3>

<CustomerDetail ButtonText="Update" Customer="@customer" @ref="customerDetail" OnValidSubmit="@Update" />

<NavigationLock OnBeforeInternalNavigation="ConfirmNavigation" ConfirmExternalNavigation />


@code {
	[Parameter]
	public string CustomerId { get; set; } = null!;

	private Customer? customer = new();

	protected override async Task OnParametersSetAsync()
	{
		customer = await _service.GetCustomerAsync(CustomerId);
	}

	private async Task Update()
	{
		if (customer is not null) await _service.UpdateCustomerAsync(customer);
		_navigation.NavigateTo("customers");
	}

	private CustomerDetail? customerDetail;

	async Task ConfirmNavigation(LocationChangingContext context)
	{
		if (customerDetail is null) return;

		if (customerDetail.HasChanges)
		{
			bool leave = await jsRuntime.InvokeAsync<bool>(
				"window.confirm",
				"You will lose changes if you leave. OK to leave. Cancel to stay.");

			if (leave)
			{
				customerDetail.ClearChanges();
			}
			else
			{
				context.PreventNavigation();
			}
		}
	}
}